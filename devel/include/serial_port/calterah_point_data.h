// Generated by gencpp from file serial_port/calterah_point_data.msg
// DO NOT EDIT!


#ifndef SERIAL_PORT_MESSAGE_CALTERAH_POINT_DATA_H
#define SERIAL_PORT_MESSAGE_CALTERAH_POINT_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_port
{
template <class ContainerAllocator>
struct calterah_point_data_
{
  typedef calterah_point_data_<ContainerAllocator> Type;

  calterah_point_data_()
    : frame_id(0)
    , frame_size(0)
    , P()
    , range()
    , vel()
    , ang()
    , ang_elv()  {
      P.assign(0.0);

      range.assign(0.0);

      vel.assign(0.0);

      ang.assign(0.0);

      ang_elv.assign(0.0);
  }
  calterah_point_data_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , frame_size(0)
    , P()
    , range()
    , vel()
    , ang()
    , ang_elv()  {
  (void)_alloc;
      P.assign(0.0);

      range.assign(0.0);

      vel.assign(0.0);

      ang.assign(0.0);

      ang_elv.assign(0.0);
  }



   typedef int64_t _frame_id_type;
  _frame_id_type frame_id;

   typedef int32_t _frame_size_type;
  _frame_size_type frame_size;

   typedef boost::array<float, 150>  _P_type;
  _P_type P;

   typedef boost::array<float, 150>  _range_type;
  _range_type range;

   typedef boost::array<float, 150>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 150>  _ang_type;
  _ang_type ang;

   typedef boost::array<float, 150>  _ang_elv_type;
  _ang_elv_type ang_elv;





  typedef boost::shared_ptr< ::serial_port::calterah_point_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_port::calterah_point_data_<ContainerAllocator> const> ConstPtr;

}; // struct calterah_point_data_

typedef ::serial_port::calterah_point_data_<std::allocator<void> > calterah_point_data;

typedef boost::shared_ptr< ::serial_port::calterah_point_data > calterah_point_dataPtr;
typedef boost::shared_ptr< ::serial_port::calterah_point_data const> calterah_point_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_port::calterah_point_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_port::calterah_point_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_port::calterah_point_data_<ContainerAllocator1> & lhs, const ::serial_port::calterah_point_data_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.frame_size == rhs.frame_size &&
    lhs.P == rhs.P &&
    lhs.range == rhs.range &&
    lhs.vel == rhs.vel &&
    lhs.ang == rhs.ang &&
    lhs.ang_elv == rhs.ang_elv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_port::calterah_point_data_<ContainerAllocator1> & lhs, const ::serial_port::calterah_point_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_port

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::serial_port::calterah_point_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_port::calterah_point_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_port::calterah_point_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_port::calterah_point_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_port::calterah_point_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_port::calterah_point_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_port::calterah_point_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f9b38ae16785d52e5632721cd27c921";
  }

  static const char* value(const ::serial_port::calterah_point_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f9b38ae16785d52ULL;
  static const uint64_t static_value2 = 0xe5632721cd27c921ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_port::calterah_point_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_port/calterah_point_data";
  }

  static const char* value(const ::serial_port::calterah_point_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_port::calterah_point_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 frame_id\n"
"int32 frame_size\n"
"float32[150] P\n"
"float32[150] range\n"
"float32[150] vel\n"
"float32[150] ang\n"
"float32[150] ang_elv\n"
;
  }

  static const char* value(const ::serial_port::calterah_point_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_port::calterah_point_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.frame_size);
      stream.next(m.P);
      stream.next(m.range);
      stream.next(m.vel);
      stream.next(m.ang);
      stream.next(m.ang_elv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calterah_point_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_port::calterah_point_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_port::calterah_point_data_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "frame_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frame_size);
    s << indent << "P[]" << std::endl;
    for (size_t i = 0; i < v.P.size(); ++i)
    {
      s << indent << "  P[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.P[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "ang[]" << std::endl;
    for (size_t i = 0; i < v.ang.size(); ++i)
    {
      s << indent << "  ang[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ang[i]);
    }
    s << indent << "ang_elv[]" << std::endl;
    for (size_t i = 0; i < v.ang_elv.size(); ++i)
    {
      s << indent << "  ang_elv[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ang_elv[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_PORT_MESSAGE_CALTERAH_POINT_DATA_H
