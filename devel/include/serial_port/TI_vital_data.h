// Generated by gencpp from file serial_port/TI_vital_data.msg
// DO NOT EDIT!


#ifndef SERIAL_PORT_MESSAGE_TI_VITAL_DATA_H
#define SERIAL_PORT_MESSAGE_TI_VITAL_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_port
{
template <class ContainerAllocator>
struct TI_vital_data_
{
  typedef TI_vital_data_<ContainerAllocator> Type;

  TI_vital_data_()
    : version(0)
    , totalPacketLen(0)
    , platform(0)
    , frameNumber(0)
    , timeCpuCycles(0)
    , numDetcetedObj(0)
    , numTLVs(0)
    , rangeBinIndexMax(0)
    , rangeBinIndexPhase(0)
    , maxVal(0.0)
    , processingCyclesOut(0)
    , rangeBinStartIndex(0)
    , rangeBinEndIndex(0)
    , unwrapPhasePeak_mm(0.0)
    , outputFilterBreathOut(0.0)
    , outputFilterHeartOut(0.0)
    , heartRateEst_FFT(0.0)
    , heartRateEst_FFT_4Hz(0.0)
    , heartRateEst_xCorr(0.0)
    , heartRateEst_peakCount(0.0)
    , breathingRateEst_FFT(0.0)
    , breathingRateEst_xCorr(0.0)
    , breathingRateEst_peakCount(0.0)
    , confidenceMetricBreathOut(0.0)
    , confidenceMetricBreathOut_xCorr(0.0)
    , confidenceMetricHeartOut(0.0)
    , confidenceMetricHeartOut_4Hz(0.0)
    , confidenceMetricHeartOut_xCorr(0.0)
    , sumEnergyBreathWfm(0.0)
    , sumEnergyHeartWfm(0.0)
    , motionDetectedFlag(0.0)
    , Reserved0(0.0)
    , Reserved1(0.0)
    , Reserved2(0.0)
    , Reserved3(0.0)
    , Reserved4(0.0)
    , Reserved5(0.0)
    , Reserved6(0.0)
    , Reserved7(0.0)
    , Reserved8(0.0)
    , Reserved9(0.0)  {
    }
  TI_vital_data_(const ContainerAllocator& _alloc)
    : version(0)
    , totalPacketLen(0)
    , platform(0)
    , frameNumber(0)
    , timeCpuCycles(0)
    , numDetcetedObj(0)
    , numTLVs(0)
    , rangeBinIndexMax(0)
    , rangeBinIndexPhase(0)
    , maxVal(0.0)
    , processingCyclesOut(0)
    , rangeBinStartIndex(0)
    , rangeBinEndIndex(0)
    , unwrapPhasePeak_mm(0.0)
    , outputFilterBreathOut(0.0)
    , outputFilterHeartOut(0.0)
    , heartRateEst_FFT(0.0)
    , heartRateEst_FFT_4Hz(0.0)
    , heartRateEst_xCorr(0.0)
    , heartRateEst_peakCount(0.0)
    , breathingRateEst_FFT(0.0)
    , breathingRateEst_xCorr(0.0)
    , breathingRateEst_peakCount(0.0)
    , confidenceMetricBreathOut(0.0)
    , confidenceMetricBreathOut_xCorr(0.0)
    , confidenceMetricHeartOut(0.0)
    , confidenceMetricHeartOut_4Hz(0.0)
    , confidenceMetricHeartOut_xCorr(0.0)
    , sumEnergyBreathWfm(0.0)
    , sumEnergyHeartWfm(0.0)
    , motionDetectedFlag(0.0)
    , Reserved0(0.0)
    , Reserved1(0.0)
    , Reserved2(0.0)
    , Reserved3(0.0)
    , Reserved4(0.0)
    , Reserved5(0.0)
    , Reserved6(0.0)
    , Reserved7(0.0)
    , Reserved8(0.0)
    , Reserved9(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _version_type;
  _version_type version;

   typedef uint32_t _totalPacketLen_type;
  _totalPacketLen_type totalPacketLen;

   typedef uint32_t _platform_type;
  _platform_type platform;

   typedef uint32_t _frameNumber_type;
  _frameNumber_type frameNumber;

   typedef uint32_t _timeCpuCycles_type;
  _timeCpuCycles_type timeCpuCycles;

   typedef uint32_t _numDetcetedObj_type;
  _numDetcetedObj_type numDetcetedObj;

   typedef uint32_t _numTLVs_type;
  _numTLVs_type numTLVs;

   typedef uint16_t _rangeBinIndexMax_type;
  _rangeBinIndexMax_type rangeBinIndexMax;

   typedef uint16_t _rangeBinIndexPhase_type;
  _rangeBinIndexPhase_type rangeBinIndexPhase;

   typedef float _maxVal_type;
  _maxVal_type maxVal;

   typedef uint32_t _processingCyclesOut_type;
  _processingCyclesOut_type processingCyclesOut;

   typedef uint16_t _rangeBinStartIndex_type;
  _rangeBinStartIndex_type rangeBinStartIndex;

   typedef uint16_t _rangeBinEndIndex_type;
  _rangeBinEndIndex_type rangeBinEndIndex;

   typedef float _unwrapPhasePeak_mm_type;
  _unwrapPhasePeak_mm_type unwrapPhasePeak_mm;

   typedef float _outputFilterBreathOut_type;
  _outputFilterBreathOut_type outputFilterBreathOut;

   typedef float _outputFilterHeartOut_type;
  _outputFilterHeartOut_type outputFilterHeartOut;

   typedef float _heartRateEst_FFT_type;
  _heartRateEst_FFT_type heartRateEst_FFT;

   typedef float _heartRateEst_FFT_4Hz_type;
  _heartRateEst_FFT_4Hz_type heartRateEst_FFT_4Hz;

   typedef float _heartRateEst_xCorr_type;
  _heartRateEst_xCorr_type heartRateEst_xCorr;

   typedef float _heartRateEst_peakCount_type;
  _heartRateEst_peakCount_type heartRateEst_peakCount;

   typedef float _breathingRateEst_FFT_type;
  _breathingRateEst_FFT_type breathingRateEst_FFT;

   typedef float _breathingRateEst_xCorr_type;
  _breathingRateEst_xCorr_type breathingRateEst_xCorr;

   typedef float _breathingRateEst_peakCount_type;
  _breathingRateEst_peakCount_type breathingRateEst_peakCount;

   typedef float _confidenceMetricBreathOut_type;
  _confidenceMetricBreathOut_type confidenceMetricBreathOut;

   typedef float _confidenceMetricBreathOut_xCorr_type;
  _confidenceMetricBreathOut_xCorr_type confidenceMetricBreathOut_xCorr;

   typedef float _confidenceMetricHeartOut_type;
  _confidenceMetricHeartOut_type confidenceMetricHeartOut;

   typedef float _confidenceMetricHeartOut_4Hz_type;
  _confidenceMetricHeartOut_4Hz_type confidenceMetricHeartOut_4Hz;

   typedef float _confidenceMetricHeartOut_xCorr_type;
  _confidenceMetricHeartOut_xCorr_type confidenceMetricHeartOut_xCorr;

   typedef float _sumEnergyBreathWfm_type;
  _sumEnergyBreathWfm_type sumEnergyBreathWfm;

   typedef float _sumEnergyHeartWfm_type;
  _sumEnergyHeartWfm_type sumEnergyHeartWfm;

   typedef float _motionDetectedFlag_type;
  _motionDetectedFlag_type motionDetectedFlag;

   typedef float _Reserved0_type;
  _Reserved0_type Reserved0;

   typedef float _Reserved1_type;
  _Reserved1_type Reserved1;

   typedef float _Reserved2_type;
  _Reserved2_type Reserved2;

   typedef float _Reserved3_type;
  _Reserved3_type Reserved3;

   typedef float _Reserved4_type;
  _Reserved4_type Reserved4;

   typedef float _Reserved5_type;
  _Reserved5_type Reserved5;

   typedef float _Reserved6_type;
  _Reserved6_type Reserved6;

   typedef float _Reserved7_type;
  _Reserved7_type Reserved7;

   typedef float _Reserved8_type;
  _Reserved8_type Reserved8;

   typedef float _Reserved9_type;
  _Reserved9_type Reserved9;





  typedef boost::shared_ptr< ::serial_port::TI_vital_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_port::TI_vital_data_<ContainerAllocator> const> ConstPtr;

}; // struct TI_vital_data_

typedef ::serial_port::TI_vital_data_<std::allocator<void> > TI_vital_data;

typedef boost::shared_ptr< ::serial_port::TI_vital_data > TI_vital_dataPtr;
typedef boost::shared_ptr< ::serial_port::TI_vital_data const> TI_vital_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_port::TI_vital_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_port::TI_vital_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_port::TI_vital_data_<ContainerAllocator1> & lhs, const ::serial_port::TI_vital_data_<ContainerAllocator2> & rhs)
{
  return lhs.version == rhs.version &&
    lhs.totalPacketLen == rhs.totalPacketLen &&
    lhs.platform == rhs.platform &&
    lhs.frameNumber == rhs.frameNumber &&
    lhs.timeCpuCycles == rhs.timeCpuCycles &&
    lhs.numDetcetedObj == rhs.numDetcetedObj &&
    lhs.numTLVs == rhs.numTLVs &&
    lhs.rangeBinIndexMax == rhs.rangeBinIndexMax &&
    lhs.rangeBinIndexPhase == rhs.rangeBinIndexPhase &&
    lhs.maxVal == rhs.maxVal &&
    lhs.processingCyclesOut == rhs.processingCyclesOut &&
    lhs.rangeBinStartIndex == rhs.rangeBinStartIndex &&
    lhs.rangeBinEndIndex == rhs.rangeBinEndIndex &&
    lhs.unwrapPhasePeak_mm == rhs.unwrapPhasePeak_mm &&
    lhs.outputFilterBreathOut == rhs.outputFilterBreathOut &&
    lhs.outputFilterHeartOut == rhs.outputFilterHeartOut &&
    lhs.heartRateEst_FFT == rhs.heartRateEst_FFT &&
    lhs.heartRateEst_FFT_4Hz == rhs.heartRateEst_FFT_4Hz &&
    lhs.heartRateEst_xCorr == rhs.heartRateEst_xCorr &&
    lhs.heartRateEst_peakCount == rhs.heartRateEst_peakCount &&
    lhs.breathingRateEst_FFT == rhs.breathingRateEst_FFT &&
    lhs.breathingRateEst_xCorr == rhs.breathingRateEst_xCorr &&
    lhs.breathingRateEst_peakCount == rhs.breathingRateEst_peakCount &&
    lhs.confidenceMetricBreathOut == rhs.confidenceMetricBreathOut &&
    lhs.confidenceMetricBreathOut_xCorr == rhs.confidenceMetricBreathOut_xCorr &&
    lhs.confidenceMetricHeartOut == rhs.confidenceMetricHeartOut &&
    lhs.confidenceMetricHeartOut_4Hz == rhs.confidenceMetricHeartOut_4Hz &&
    lhs.confidenceMetricHeartOut_xCorr == rhs.confidenceMetricHeartOut_xCorr &&
    lhs.sumEnergyBreathWfm == rhs.sumEnergyBreathWfm &&
    lhs.sumEnergyHeartWfm == rhs.sumEnergyHeartWfm &&
    lhs.motionDetectedFlag == rhs.motionDetectedFlag &&
    lhs.Reserved0 == rhs.Reserved0 &&
    lhs.Reserved1 == rhs.Reserved1 &&
    lhs.Reserved2 == rhs.Reserved2 &&
    lhs.Reserved3 == rhs.Reserved3 &&
    lhs.Reserved4 == rhs.Reserved4 &&
    lhs.Reserved5 == rhs.Reserved5 &&
    lhs.Reserved6 == rhs.Reserved6 &&
    lhs.Reserved7 == rhs.Reserved7 &&
    lhs.Reserved8 == rhs.Reserved8 &&
    lhs.Reserved9 == rhs.Reserved9;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_port::TI_vital_data_<ContainerAllocator1> & lhs, const ::serial_port::TI_vital_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_port

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::serial_port::TI_vital_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_port::TI_vital_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_port::TI_vital_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_port::TI_vital_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_port::TI_vital_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_port::TI_vital_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_port::TI_vital_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "527ccc2a7cc0b315e72f8d6f7b744dc8";
  }

  static const char* value(const ::serial_port::TI_vital_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x527ccc2a7cc0b315ULL;
  static const uint64_t static_value2 = 0xe72f8d6f7b744dc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_port::TI_vital_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_port/TI_vital_data";
  }

  static const char* value(const ::serial_port::TI_vital_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_port::TI_vital_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 version\n"
"uint32 totalPacketLen\n"
"uint32 platform\n"
"uint32 frameNumber\n"
"uint32 timeCpuCycles\n"
"uint32 numDetcetedObj\n"
"uint32 numTLVs\n"
"uint16 rangeBinIndexMax\n"
"uint16 rangeBinIndexPhase\n"
"float32 maxVal\n"
"uint32 processingCyclesOut\n"
"uint16 rangeBinStartIndex\n"
"uint16 rangeBinEndIndex\n"
"float32 unwrapPhasePeak_mm\n"
"float32 outputFilterBreathOut\n"
"float32 outputFilterHeartOut\n"
"float32 heartRateEst_FFT\n"
"float32 heartRateEst_FFT_4Hz\n"
"float32 heartRateEst_xCorr\n"
"float32 heartRateEst_peakCount\n"
"float32 breathingRateEst_FFT\n"
"float32 breathingRateEst_xCorr\n"
"float32 breathingRateEst_peakCount\n"
"float32 confidenceMetricBreathOut\n"
"float32 confidenceMetricBreathOut_xCorr\n"
"float32 confidenceMetricHeartOut\n"
"float32 confidenceMetricHeartOut_4Hz\n"
"float32 confidenceMetricHeartOut_xCorr\n"
"float32 sumEnergyBreathWfm\n"
"float32 sumEnergyHeartWfm\n"
"float32 motionDetectedFlag\n"
"float32 Reserved0\n"
"float32 Reserved1\n"
"float32 Reserved2\n"
"float32 Reserved3\n"
"float32 Reserved4\n"
"float32 Reserved5\n"
"float32 Reserved6\n"
"float32 Reserved7\n"
"float32 Reserved8\n"
"float32 Reserved9\n"
;
  }

  static const char* value(const ::serial_port::TI_vital_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_port::TI_vital_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version);
      stream.next(m.totalPacketLen);
      stream.next(m.platform);
      stream.next(m.frameNumber);
      stream.next(m.timeCpuCycles);
      stream.next(m.numDetcetedObj);
      stream.next(m.numTLVs);
      stream.next(m.rangeBinIndexMax);
      stream.next(m.rangeBinIndexPhase);
      stream.next(m.maxVal);
      stream.next(m.processingCyclesOut);
      stream.next(m.rangeBinStartIndex);
      stream.next(m.rangeBinEndIndex);
      stream.next(m.unwrapPhasePeak_mm);
      stream.next(m.outputFilterBreathOut);
      stream.next(m.outputFilterHeartOut);
      stream.next(m.heartRateEst_FFT);
      stream.next(m.heartRateEst_FFT_4Hz);
      stream.next(m.heartRateEst_xCorr);
      stream.next(m.heartRateEst_peakCount);
      stream.next(m.breathingRateEst_FFT);
      stream.next(m.breathingRateEst_xCorr);
      stream.next(m.breathingRateEst_peakCount);
      stream.next(m.confidenceMetricBreathOut);
      stream.next(m.confidenceMetricBreathOut_xCorr);
      stream.next(m.confidenceMetricHeartOut);
      stream.next(m.confidenceMetricHeartOut_4Hz);
      stream.next(m.confidenceMetricHeartOut_xCorr);
      stream.next(m.sumEnergyBreathWfm);
      stream.next(m.sumEnergyHeartWfm);
      stream.next(m.motionDetectedFlag);
      stream.next(m.Reserved0);
      stream.next(m.Reserved1);
      stream.next(m.Reserved2);
      stream.next(m.Reserved3);
      stream.next(m.Reserved4);
      stream.next(m.Reserved5);
      stream.next(m.Reserved6);
      stream.next(m.Reserved7);
      stream.next(m.Reserved8);
      stream.next(m.Reserved9);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TI_vital_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_port::TI_vital_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_port::TI_vital_data_<ContainerAllocator>& v)
  {
    s << indent << "version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.version);
    s << indent << "totalPacketLen: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.totalPacketLen);
    s << indent << "platform: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.platform);
    s << indent << "frameNumber: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frameNumber);
    s << indent << "timeCpuCycles: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timeCpuCycles);
    s << indent << "numDetcetedObj: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numDetcetedObj);
    s << indent << "numTLVs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numTLVs);
    s << indent << "rangeBinIndexMax: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rangeBinIndexMax);
    s << indent << "rangeBinIndexPhase: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rangeBinIndexPhase);
    s << indent << "maxVal: ";
    Printer<float>::stream(s, indent + "  ", v.maxVal);
    s << indent << "processingCyclesOut: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.processingCyclesOut);
    s << indent << "rangeBinStartIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rangeBinStartIndex);
    s << indent << "rangeBinEndIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rangeBinEndIndex);
    s << indent << "unwrapPhasePeak_mm: ";
    Printer<float>::stream(s, indent + "  ", v.unwrapPhasePeak_mm);
    s << indent << "outputFilterBreathOut: ";
    Printer<float>::stream(s, indent + "  ", v.outputFilterBreathOut);
    s << indent << "outputFilterHeartOut: ";
    Printer<float>::stream(s, indent + "  ", v.outputFilterHeartOut);
    s << indent << "heartRateEst_FFT: ";
    Printer<float>::stream(s, indent + "  ", v.heartRateEst_FFT);
    s << indent << "heartRateEst_FFT_4Hz: ";
    Printer<float>::stream(s, indent + "  ", v.heartRateEst_FFT_4Hz);
    s << indent << "heartRateEst_xCorr: ";
    Printer<float>::stream(s, indent + "  ", v.heartRateEst_xCorr);
    s << indent << "heartRateEst_peakCount: ";
    Printer<float>::stream(s, indent + "  ", v.heartRateEst_peakCount);
    s << indent << "breathingRateEst_FFT: ";
    Printer<float>::stream(s, indent + "  ", v.breathingRateEst_FFT);
    s << indent << "breathingRateEst_xCorr: ";
    Printer<float>::stream(s, indent + "  ", v.breathingRateEst_xCorr);
    s << indent << "breathingRateEst_peakCount: ";
    Printer<float>::stream(s, indent + "  ", v.breathingRateEst_peakCount);
    s << indent << "confidenceMetricBreathOut: ";
    Printer<float>::stream(s, indent + "  ", v.confidenceMetricBreathOut);
    s << indent << "confidenceMetricBreathOut_xCorr: ";
    Printer<float>::stream(s, indent + "  ", v.confidenceMetricBreathOut_xCorr);
    s << indent << "confidenceMetricHeartOut: ";
    Printer<float>::stream(s, indent + "  ", v.confidenceMetricHeartOut);
    s << indent << "confidenceMetricHeartOut_4Hz: ";
    Printer<float>::stream(s, indent + "  ", v.confidenceMetricHeartOut_4Hz);
    s << indent << "confidenceMetricHeartOut_xCorr: ";
    Printer<float>::stream(s, indent + "  ", v.confidenceMetricHeartOut_xCorr);
    s << indent << "sumEnergyBreathWfm: ";
    Printer<float>::stream(s, indent + "  ", v.sumEnergyBreathWfm);
    s << indent << "sumEnergyHeartWfm: ";
    Printer<float>::stream(s, indent + "  ", v.sumEnergyHeartWfm);
    s << indent << "motionDetectedFlag: ";
    Printer<float>::stream(s, indent + "  ", v.motionDetectedFlag);
    s << indent << "Reserved0: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved0);
    s << indent << "Reserved1: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved1);
    s << indent << "Reserved2: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved2);
    s << indent << "Reserved3: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved3);
    s << indent << "Reserved4: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved4);
    s << indent << "Reserved5: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved5);
    s << indent << "Reserved6: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved6);
    s << indent << "Reserved7: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved7);
    s << indent << "Reserved8: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved8);
    s << indent << "Reserved9: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved9);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_PORT_MESSAGE_TI_VITAL_DATA_H
